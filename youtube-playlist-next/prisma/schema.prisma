// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Playlist {
  id             String   @id @default(cuid())
  youtubeId      String   @unique @map("youtube_id")
  title          String
  description    String?
  url            String
  videoCount     Int      @map("video_count")
  privacy        String   @default("unlisted")
  aiGenerated    Boolean  @default(false) @map("ai_generated")
  createdBy      String   @default("api") @map("created_by")
  createdAt      DateTime @default(now()) @map("created_at")
  userIdentifier String?  @map("user_identifier")
  metadata       String?

  videos         PlaylistVideo[]

  @@index([createdAt])
  @@index([userIdentifier])
  @@map("playlists")
}

model PlaylistVideo {
  id            Int      @id @default(autoincrement())
  playlistId    String   @map("playlist_id")
  videoId       String   @map("video_id")
  videoTitle    String?  @map("video_title")
  videoChannel  String?  @map("video_channel")
  videoDuration String?  @map("video_duration")
  position      Int
  addedAt       DateTime @default(now()) @map("added_at")

  playlist      Playlist @relation(fields: [playlistId], references: [id])

  @@index([playlistId])
  @@map("playlist_videos")
}

model ApiUsage {
  id           Int      @id @default(autoincrement())
  service      String
  operation    String
  tokensUsed   Int?     @map("tokens_used")
  costEstimate Float?   @map("cost_estimate")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("api_usage")
}

// User model for NextAuth (new table)
model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  name          String?
  image         String?
  telegramId    String?   @unique @map("telegram_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}